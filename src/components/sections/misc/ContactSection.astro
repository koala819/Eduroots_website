---
// Import the necessary dependencies.
import SubmitButton from "@components/ui/buttons/SubmitButton.astro";
import ContactIconBlock from "@components/ui/blocks/ContactIconBlock.astro";
import TextInput from "@components/ui/forms/input/TextInput.astro";
import EmailContactInput from "@components/ui/forms/input/EmailContactInput.astro";
import PhoneInput from "@components/ui/forms/input/PhoneInput.astro";
import TextAreaInput from "@components/ui/forms/input/TextAreaInput.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define the variables that will be used in this component
const title: string = "Contactez-moi";
const subTitle: string =
  "Vous avez des questions sur Eduroots ? Discutons de la mise en place de notre solution dans votre mosquée.";
const formTitle: string = "Remplissez le formulaire ci-dessous";
const formSubTitle: string = "Je vous réponds sous 24h.";
---

<!-- Contact Us -->
<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
      >
        {title}
      </h1>
      <p class="mt-1 text-pretty text-neutral-600 dark:text-neutral-400">
        {subTitle}
      </p>
    </div>

    <div class="mt-12 grid items-center gap-6 lg:grid-cols-2 lg:gap-16">
      <div class="flex flex-col rounded-xl p-4 sm:p-6 lg:p-8">
        <h2
          class="mb-8 text-xl font-bold text-neutral-700 dark:text-neutral-300"
        >
          {formTitle}
        </h2>
        <!-- Form for user input with various input fields.-->
        <!-- Each field utilizes a different input component for the specific type of input (text, email, phone, and textarea)-->
        <form action="/api/contact" method="POST">
          <!-- Honeypot field to catch bots -->
          <div class="hidden">
            <input type="text" name="emai" tabindex="-1" autocomplete="off" />
          </div>
          <div class="grid gap-4">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <TextInput
                id="hs-firstname-contacts"
                label="Prénom"
                name="hs-firstname-contacts"
              />
              <TextInput
                id="hs-lastname-contacts"
                label="Nom"
                name="hs-lastname-contacts"
              />
            </div>
            <EmailContactInput id="hs-email-contacts" />
            <PhoneInput id="hs-phone-number" />
            <TextAreaInput
              id="hs-about-contacts"
              label="Votre message"
              name="hs-about-contacts"
            />
          </div>

          <div class="mt-4 grid">
            <SubmitButton title="Envoyer le message" />
          </div>

          <div class="mt-3 text-center">
            <p class="text-sm text-neutral-600 dark:text-neutral-400">
              {formSubTitle}
            </p>
          </div>

          <!-- Message de statut -->
          <div id="form-status" class="mt-4 hidden">
            <div id="success-message" class="hidden rounded-lg bg-green-50 p-4 text-green-800 dark:bg-green-900/20 dark:text-green-400">
              <p class="text-sm font-medium">Message envoyé avec succès !</p>
              <p class="text-xs mt-1">Nous vous répondrons dans les 48 heures.</p>
            </div>
            <div id="error-message" class="hidden rounded-lg bg-red-50 p-4 text-red-800 dark:bg-red-900/20 dark:text-red-400">
              <p class="text-sm font-medium">Erreur lors de l'envoi</p>
              <p id="error-text" class="text-xs mt-1">Veuillez réessayer plus tard.</p>
            </div>
          </div>
        </form>
      </div>

      <!--ContactIconBlocks are used to display different methods of contacting, including visiting office, email, browsing knowledgebase, and FAQ.-->
      <div class="divide-y divide-neutral-300 dark:divide-neutral-700">
        <ContactIconBlock
          heading="Téléphone"
          content="Appelez-moi directement pour une discussion personnalisée"
          isLinkVisible={true}
          linkTitle="06 76 26 30 24"
          linkURL="tel:0676263024"
          ><Icon name="phone" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Email"
          content="Préférez l'écrit ? Envoyez-moi un email à"
          isLinkVisible={true}
          linkTitle="x.genolhac@gmail.com"
          linkURL="mailto:x.genolhac@gmail.com"
          ><Icon name="envelopeOpen" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Questions fréquentes"
          content="Trouvez rapidement des réponses à vos questions sur Eduroots."
          isLinkVisible={true}
          linkTitle="Consulter la FAQ"
          linkURL="/faq"
          isArrowVisible={true}
          ><Icon name="question" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Zone d'intervention"
          content="Toulouse et dans un rayon de 20 km"
          isAddressVisible={true}
          addressContent="Déplacement sur site pour démonstration et formation"
          ><Icon name="mapPin" />
        </ContactIconBlock>
      </div>
    </div>
  </div>

        <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Contact form script loaded');

      const form = document.querySelector('form') as HTMLFormElement;
      const formStatus = document.getElementById('form-status');
      const successMessage = document.getElementById('success-message');
      const errorMessage = document.getElementById('error-message');
      const errorText = document.getElementById('error-text');
      const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;

      console.log('Form elements found:', {
        form: !!form,
        formStatus: !!formStatus,
        successMessage: !!successMessage,
        errorMessage: !!errorMessage,
        errorText: !!errorText,
        submitButton: !!submitButton
      });

      if (form && formStatus && successMessage && errorMessage && errorText) {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          console.log('Form submitted');

          // Validation côté client
          const firstName = (form.querySelector('[name="hs-firstname-contacts"]') as HTMLInputElement)?.value.trim();
          const lastName = (form.querySelector('[name="hs-lastname-contacts"]') as HTMLInputElement)?.value.trim();
          const email = (form.querySelector('[name="hs-email-contacts"]') as HTMLInputElement)?.value.trim();
          const phone = (form.querySelector('[name="hs-phone-number"]') as HTMLInputElement)?.value.trim();
          const message = (form.querySelector('[name="hs-about-contacts"]') as HTMLTextAreaElement)?.value.trim();

          console.log('Form values:', { firstName, lastName, email, phone, message });

          // Validation par champ
          let hasErrors = false;
          const fieldErrors: { [key: string]: string } = {};

          // Validation prénom
          if (!firstName) {
            fieldErrors.firstName = 'Le prénom est requis';
            hasErrors = true;
          }

          // Validation nom
          if (!lastName) {
            fieldErrors.lastName = 'Le nom est requis';
            hasErrors = true;
          }

          // Validation email
          if (!email) {
            fieldErrors.email = 'L\'email est requis';
            hasErrors = true;
          } else {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
              fieldErrors.email = 'Veuillez entrer une adresse email valide';
              hasErrors = true;
            }
          }

          // Validation téléphone
          if (!phone) {
            fieldErrors.phone = 'Le téléphone est requis';
            hasErrors = true;
          }

          // Validation message
          if (!message) {
            fieldErrors.message = 'Le message est requis';
            hasErrors = true;
          }

          // Afficher les erreurs par champ
          Object.keys(fieldErrors).forEach(fieldName => {
            const fieldElement = form.querySelector(`[name="hs-${fieldName}-contacts"]`) ||
                                form.querySelector(`[name="hs-${fieldName}-number"]`) ||
                                form.querySelector(`[name="hs-about-contacts"]`);

            if (fieldElement) {
              // Supprimer l'ancienne erreur
              const existingError = fieldElement.parentElement?.querySelector('.field-error');
              if (existingError) {
                existingError.remove();
              }

              // Ajouter la nouvelle erreur
              const errorDiv = document.createElement('div');
              errorDiv.className = 'field-error text-red-600 text-xs mt-1';
              errorDiv.textContent = fieldErrors[fieldName];
              fieldElement.parentElement?.appendChild(errorDiv);
            }
          });

          if (hasErrors) {
            console.log('Validation errors:', fieldErrors);
            return;
          }

          // Désactiver le bouton pendant l'envoi
          if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = 'Envoi en cours...';
          }

          // Masquer les messages précédents
          formStatus.classList.add('hidden');
          successMessage.classList.add('hidden');
          errorMessage.classList.add('hidden');

          try {
            console.log('Sending form data to /api/contact');
            const formData = new FormData(form);

            // Log des données envoyées
            for (let [key, value] of formData.entries()) {
              console.log(`${key}:`, value);
            }

            const response = await fetch('/api/contact', {
              method: 'POST',
              body: formData
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            const result = await response.json();
            console.log('Response JSON:', result);

            formStatus.classList.remove('hidden');

            if (response.ok && result.status === 200) {
              successMessage.classList.remove('hidden');
              form.reset();
              console.log('Form submitted successfully');
            } else {
              errorMessage.classList.remove('hidden');
              if (result.statusText) {
                errorText.textContent = result.statusText;
              } else {
                errorText.textContent = 'Erreur lors de l\'envoi du message.';
              }
              console.log('Form submission failed:', result);
            }
          } catch (error) {
            console.error('Fetch error:', error);
            formStatus.classList.remove('hidden');
            errorMessage.classList.remove('hidden');
            errorText.textContent = 'Erreur de connexion. Vérifiez votre connexion internet et réessayez.';
          } finally {
            // Réactiver le bouton
            if (submitButton) {
              submitButton.disabled = false;
              submitButton.textContent = 'Envoyer le message';
            }
          }
        });

        // Supprimer les erreurs quand l'utilisateur tape
        const inputs = form.querySelectorAll('input, textarea');
        inputs.forEach(input => {
          input.addEventListener('input', function(this: HTMLInputElement | HTMLTextAreaElement) {
            const errorElement = this.parentElement?.querySelector('.field-error');
            if (errorElement) {
              errorElement.remove();
            }
          });
        });
      }
    });
  </script>
</section>
