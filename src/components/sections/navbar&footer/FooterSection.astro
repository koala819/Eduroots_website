---
// Import the necessary dependencies
import FooterSocialLink from "@components/ui/links/FooterSocialLink.astro";
import EmailFooterInput from "@components/ui/forms/input/EmailFooterInput.astro";
import strings from "@utils/navigation.ts";
import Icon from "@components/ui/icons/Icon.astro";
import BrandLogo from "@components/BrandLogo.astro";
import { SITE } from "@data/constants";

// Define the variables that will be used in this component
const sectionThreeTitle: string = "Rester à jour";
const sectionThreeContent: string = "Restez informé des derniers outils et des offres exclusives.";
const crafted: string = "Fabriqué par";
---

<footer class="w-full bg-neutral-300 dark:bg-neutral-900">
  <div
    class="mx-auto w-full max-w-[85rem] px-4 py-10 sm:px-6 lg:px-16 lg:pt-20 2xl:max-w-(--breakpoint-2xl)"
  >
    <div class="grid grid-cols-2 gap-6 md:grid-cols-4 lg:grid-cols-5">
      <div class="col-span-full lg:col-span-1">
        <!-- Brand Logo -->
        <BrandLogo class="h-auto w-32" />
      </div>
      <!-- An array of links for Product and Company sections -->
      {
        strings.footerLinks.map((section) => (
          <div class="col-span-1">
            <h3 class="font-bold text-neutral-800 dark:text-neutral-200">
              {section.section}
            </h3>
            <ul class="mt-3 grid space-y-3">
              {section.links.map((link, index) => (
                <li>
                  <a
                    href={link.url}
                    class="inline-flex gap-x-2 rounded-lg text-neutral-600 outline-hidden ring-zinc-500 transition duration-300 hover:text-neutral-500 focus-visible:ring-3 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:text-neutral-300 dark:focus:outline-hidden"
                  >
                    {link.name}
                  </a>
                  {section.section === "Company" && index === 2 ? (
                    <span class="ms-1 inline rounded-lg bg-accent px-2 py-1 text-xs font-bold text-neutral-50">
                      We're hiring!
                    </span>
                  ) : null}
                </li>
              ))}
            </ul>
          </div>
        ))
      }

      <div class="col-span-2">
        <h3 class="font-bold text-neutral-800 dark:text-neutral-200">
          {sectionThreeTitle}
        </h3>

        <form action="/api/newsletter" method="POST" id="newsletter-form">
          <!-- Honeypot field to catch bots -->
          <div class="hidden">
            <input type="text" name="emai" tabindex="-1" autocomplete="off" />
          </div>
          <EmailFooterInput />
          <p class="mt-3 text-sm text-neutral-600 dark:text-neutral-400">
            {sectionThreeContent}
          </p>

          <!-- Message de statut -->
          <div id="newsletter-status" class="mt-3 hidden">
            <div id="newsletter-success" class="hidden rounded-lg bg-green-50 p-3 text-green-800 dark:bg-green-900/20 dark:text-green-400">
              <p class="text-sm font-medium">Inscription réussie !</p>
              <p class="text-xs mt-1">Vous recevrez nos prochaines actualités.</p>
            </div>
            <div id="newsletter-error" class="hidden rounded-lg bg-red-50 p-3 text-red-800 dark:bg-red-900/20 dark:text-red-400">
              <p class="text-sm font-medium">Erreur lors de l'inscription</p>
              <p id="newsletter-error-text" class="text-xs mt-1">Veuillez réessayer plus tard.</p>
            </div>
          </div>
        </form>
      </div>
    </div>

    <div
      class="mt-9 grid gap-y-2 sm:mt-12 sm:flex sm:items-center sm:justify-between sm:gap-y-0"
    >
      <div class="flex items-center justify-between">
        <p class="text-sm text-neutral-600 dark:text-neutral-400">
          © <span id="current-year"></span> {SITE.title}. {crafted}
          <a
            class="rounded-lg font-medium underline underline-offset-2 outline-hidden ring-zinc-500 transition duration-300 hover:text-neutral-700 hover:decoration-dashed focus:outline-hidden focus-visible:ring-3 dark:ring-zinc-200 dark:hover:text-neutral-300"
            href="https://www.gulamoff.dev/"
            target="_blank"
            rel="noopener noreferrer">gulamoff</a
          >.
        </p>
      </div>

      <!-- Social Brands -->
      <div>
        <FooterSocialLink url={strings.socialLinks.github}
          ><Icon name="githubFooter" />
        </FooterSocialLink>

        <FooterSocialLink url={strings.socialLinks.linkedin}
          ><Icon name="linkedinFooter" />
        </FooterSocialLink>
      </div>
    </div>

    <script>
      const year = new Date().getFullYear();
      const element = document.getElementById("current-year");
      element!.innerText = year.toString();

      // Gestion du formulaire de newsletter
      document.addEventListener('DOMContentLoaded', function() {
        const newsletterForm = document.getElementById('newsletter-form') as HTMLFormElement;
        const newsletterStatus = document.getElementById('newsletter-status');
        const newsletterSuccess = document.getElementById('newsletter-success');
        const newsletterError = document.getElementById('newsletter-error');
        const newsletterErrorText = document.getElementById('newsletter-error-text');
        const submitButton = newsletterForm?.querySelector('button[type="submit"]') as HTMLButtonElement;

        if (newsletterForm && newsletterStatus && newsletterSuccess && newsletterError && newsletterErrorText) {
          newsletterForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Désactiver le bouton pendant l'envoi
            if (submitButton) {
              submitButton.disabled = true;
              submitButton.textContent = 'Inscription...';
            }

            // Masquer les messages précédents
            newsletterStatus.classList.add('hidden');
            newsletterSuccess.classList.add('hidden');
            newsletterError.classList.add('hidden');

            try {
              const formData = new FormData(newsletterForm);
              const response = await fetch('/newsletter', {
                method: 'POST',
                body: formData
              });

              const result = await response.json();

              newsletterStatus.classList.remove('hidden');

              if (response.ok && result.status === 200) {
                newsletterSuccess.classList.remove('hidden');
                newsletterForm.reset();
              } else {
                newsletterError.classList.remove('hidden');
                if (result.statusText) {
                  newsletterErrorText.textContent = result.statusText;
                }
              }
            } catch (error) {
              newsletterStatus.classList.remove('hidden');
              newsletterError.classList.remove('hidden');
              newsletterErrorText.textContent = 'Erreur de connexion. Veuillez réessayer.';
            } finally {
              // Réactiver le bouton
              if (submitButton) {
                submitButton.disabled = false;
                submitButton.textContent = 'S\'abonner';
              }
            }
          });
        }
      });
    </script>
  </div>
</footer>
