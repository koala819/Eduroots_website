---
// Import necessary components and utilities
import MainLayout from "@/layouts/MainLayout.astro";
import AvatarBlogLarge from "@components/ui/avatars/AvatarBlogLarge.astro";
import CardRelated from "@components/ui/cards/CardRelated.astro";
import { Image } from "astro:assets";

import { capitalize, formatDate } from "@utils/utils";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { SITE } from "@data/constants";

// Import images
import smartphoneMessagerie from "@images/blog/Smartphone_Messagerie.webp";
import smartphoneEtoiles from "@images/blog/Smartphone_Etoiles.webp";
import laptopStudents from "@images/blog/Laptop_Students_Often_Missed.webp";

// Update getStaticPaths for all blog posts
export async function getStaticPaths() {
  const blogPosts = await getCollection("blog");
  return blogPosts.map((post) => {
    return {
      params: { id: post.id },
      props: { post },
    };
  });
}

// Get the current post's data
const { post } = Astro.props;

const blogPosts: CollectionEntry<"blog">[] = await getCollection("blog");

// Filter out the current post to get related posts
const relatedPosts: CollectionEntry<"blog">[] = blogPosts.filter(
  (blogEntry) => blogEntry.id !== post.id
);

// Map image paths to imported images
const imageMap = {
  "@/images/blog/Smartphone_Messagerie.webp": smartphoneMessagerie,
  "@/images/blog/Smartphone_Etoiles.webp": smartphoneEtoiles,
  "@/images/blog/Laptop_Students_Often_Missed.webp": laptopStudents,
};

const cardImage = typeof post.data.cardImage === 'string'
  ? imageMap[post.data.cardImage as keyof typeof imageMap] || post.data.cardImage
  : post.data.cardImage;

// Render the post content
const { Content } = await post.render();

const pageTitle: string = `${post.data.title} | ${SITE.title}`;
// For the meta description, use the first paragraph of content if available
const metaDescription =
  post.data.contents[0] || `Lisez ${post.data.title} sur le blog d'EduRoots`;
const ogTitle = `${post.data.title} | Blog | ${SITE.title}`;
---

<MainLayout
  title={pageTitle}
  customDescription={metaDescription}
  customOgTitle={ogTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    headline: post.data.title,
    image: typeof cardImage === 'string' ? cardImage : cardImage.src,
    datePublished: post.data.pubDate.toISOString(),
    author: {
      "@type": "Person",
      name: post.data.author,
    },
    publisher: {
      "@type": "Organization",
      name: SITE.title,
      logo: {
        "@type": "ImageObject",
        url: "https://eduroots.org/favicon.ico",
      },
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": `https://eduroots.org/blog/${post.id}`,
    },
  }}
>
  <section class="mx-auto max-w-3xl px-4 pt-6 pb-12 sm:px-6 lg:px-8 lg:pt-10">
    <div class="max-w-2xl">
      <div class="mb-6 flex items-center justify-between">
        <div class="flex w-full gap-x-5 sm:items-center sm:gap-x-3">
          <AvatarBlogLarge blogEntry={post} />
          <div class="grow">
            <div class="flex items-center justify-between gap-x-2">
              <div>
                {/* Post metadata and author info */}
                <span class="font-bold text-neutral-700 dark:text-neutral-300">
                  {post.data.author}
                </span>
                <ul class="text-xs text-neutral-500">
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {formatDate(post.data.pubDate)}
                  </li>
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {post.data.readTime} min read
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Blog post title */}
      <h2
        class="mb-3 text-2xl font-bold text-neutral-800 md:text-3xl dark:text-neutral-200"
      >
        {post.data.title}
      </h2>
      {/* Blog post contents */}
      <div class="mb-5 space-y-5 md:mb-8 md:space-y-8">
        <Content />
      </div>
    </div>
  </section>

  {/* Related articles section */}
  <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="mb-10 max-w-2xl">
      <h2
        class="text-2xl font-bold text-balance text-neutral-800 md:text-4xl md:leading-tight dark:text-neutral-200"
      >
        Articles similaires
      </h2>
    </div>

    <div class="grid grid-cols-2 gap-6">
      {relatedPosts.map((entry) => <CardRelated blogEntry={entry} />)}
    </div>
  </section>
</MainLayout>
